name: Test and Build SharePoint Permissions Exceler

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test-gui:
    name: Test GUI Application
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'  # Use stable version for CI

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~\AppData\Local\pip\Cache
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Test imports and module loading
      run: |
        python -c "import pandas, openpyxl, msal, requests; from PyQt6.QtWidgets import QApplication; import main; print('All imports successful')"

    - name: Test GUI initialization (headless)
      run: |
        python tests/test_gui_headless.py

    - name: Test main module functions
      run: |
        python -c "
        import main
        # Test CSV detection function
        result = main.find_csv_file()
        print(f'CSV detection test: {result is None}')  # Should be None (no CSV in CI)

        # Test credential validation
        try:
            result = main.validate_azure_credentials('', '', '')
            print(f'Credential validation test: {result[0] == False}')  # Should fail with empty creds
        except:
            print('Credential validation test: True')  # Expected to fail

        print('Main module tests completed')
        "

  build-executable:
    name: Build Windows Executable
    runs-on: windows-latest
    needs: test-gui

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~\AppData\Local\pip\Cache
        key: ${{ runner.os }}-build-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-build-pip-

    - name: Install dependencies and PyInstaller
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    - name: Build executable
      run: |
        cd build
        python -m PyInstaller gui.spec

    - name: Verify executable was created
      run: |
        if (Test-Path "build\dist\SharePoint-Permissions-Exceler.exe") {
          $size = (Get-Item "build\dist\SharePoint-Permissions-Exceler.exe").Length
          $sizeMB = [math]::Round($size / 1MB, 2)
          Write-Output "✅ Executable created successfully"
          Write-Output "📦 File size: $sizeMB MB"
          Write-Output "📍 Location: build\dist\SharePoint-Permissions-Exceler.exe"

          # Verify it's actually an executable
          $fileType = (Get-Item "build\dist\SharePoint-Permissions-Exceler.exe").Extension
          if ($fileType -eq ".exe") {
            Write-Output "✅ File type verification passed"
          } else {
            Write-Error "❌ File is not a .exe file"
            exit 1
          }
        } else {
          Write-Error "❌ Executable was not created"
          exit 1
        }

    - name: Test executable imports (quick test)
      run: |
        # Test that the executable can at least start without immediate import errors
        # We'll run it with a timeout to avoid hanging on GUI
        $job = Start-Job -ScriptBlock {
          try {
            # Try to run the executable with a timeout
            $process = Start-Process -FilePath "build\dist\SharePoint-Permissions-Exceler.exe" -PassThru -WindowStyle Hidden
            Start-Sleep -Seconds 5  # Give it time to initialize
            if (!$process.HasExited) {
              $process.Kill()
              return "SUCCESS: Executable started without import errors"
            } else {
              return "ERROR: Executable exited immediately (exit code: $($process.ExitCode))"
            }
          } catch {
            return "ERROR: $($_.Exception.Message)"
          }
        }

        $result = Wait-Job $job -Timeout 15 | Receive-Job
        Remove-Job $job -Force

        Write-Output $result
        if ($result -like "*SUCCESS*") {
          Write-Output "✅ Executable test passed"
        } else {
          Write-Output "⚠️ Executable test inconclusive: $result"
          # Don't fail the build for this, as GUI apps can be tricky in CI
        }

    - name: Upload executable as artifact
      uses: actions/upload-artifact@v3
      with:
        name: sharepoint-permissions-exceler-exe
        path: build/dist/SharePoint-Permissions-Exceler.exe
        retention-days: 30

    - name: Create build summary
      run: |
        $size = (Get-Item "build\dist\SharePoint-Permissions-Exceler.exe").Length
        $sizeMB = [math]::Round($size / 1MB, 2)

        Write-Output "## 🎉 Build Summary" >> $env:GITHUB_STEP_SUMMARY
        Write-Output "" >> $env:GITHUB_STEP_SUMMARY
        Write-Output "✅ **GUI Tests**: Passed" >> $env:GITHUB_STEP_SUMMARY
        Write-Output "✅ **Executable Build**: Successful" >> $env:GITHUB_STEP_SUMMARY
        Write-Output "📦 **File Size**: $sizeMB MB" >> $env:GITHUB_STEP_SUMMARY
        Write-Output "📅 **Build Date**: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss UTC')" >> $env:GITHUB_STEP_SUMMARY
        Write-Output "" >> $env:GITHUB_STEP_SUMMARY
        Write-Output "### 📥 Download" >> $env:GITHUB_STEP_SUMMARY
        Write-Output "The executable is available as an artifact in this workflow run." >> $env:GITHUB_STEP_SUMMARY